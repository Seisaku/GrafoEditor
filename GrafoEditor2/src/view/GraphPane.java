/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import viewcontrol.EdgeControl;
import viewcontrol.GraphControl;
import viewcontrol.ItemControl;
import viewcontrol.NodeControl;

/**
 *
 * @author I839169
 */
public class GraphPane extends javax.swing.JPanel {

    private GraphControl GC;
    private BufferedImage BI, BI2;
    private ItemControl Hightlighted;

    public GraphControl getGC() {
        return GC;
    }

    public void setGC(GraphControl GC) {
        this.GC = GC;
    }

    public ItemControl getHightlighted() {
        return Hightlighted;
    }

    public void setHightlighted(ItemControl Hightlighted) {
        this.Hightlighted = Hightlighted;
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        NodeControl nhl = null;
        EdgeControl ehl = null;
        //&& (this.Hightlighted.class==NodeControl.class)
        if (this.Hightlighted != null) {
            if (this.Hightlighted.getClass() == NodeControl.class) {
                nhl = (NodeControl) Hightlighted;
            } else {
                ehl = (EdgeControl) Hightlighted;
            }

        }
        if (this.GC != null) {
            if (BI == null) {
                this.startBI();
            }
            EdgeControl ec;
            NodeControl nc;
            Point A, B;
            g.setColor(Color.black);
            for (int i = 0; i < GC.getECsize(); i++) {
                ec = this.GC.getEC(i);
                A = ec.getA().getPoint();
                B = ec.getB().getPoint();
                if (ehl == ec) {
                    g.setColor(Color.red);
                }
                g.drawLine(A.x, A.y, B.x, B.y);
                g.setColor(Color.black);
            }
            for (int i = 0; i < GC.getNCsize(); i++) {
                nc = this.GC.getNC(i);
                //g.drawOval(nc.getPoint().x, nc.getPoint().y, 5, 5);
                if (nhl == nc) {
                    g.drawImage(BI2, nc.getPoint().x - 15, nc.getPoint().y - 15, this);
                } else {
                    g.drawImage(BI, nc.getPoint().x - 15, nc.getPoint().y - 15, this);
                }
            }
        }
    }

    public void startBI() {
        try {
            BI = ImageIO.read(new File("C:\\Users\\I839169\\Documents\\NetBeansProjects\\GrafoEditor\\GrafoEditor2\\src\\resouce\\Node.png"));
            BI2 = ImageIO.read(new File("C:\\Users\\I839169\\Documents\\NetBeansProjects\\GrafoEditor\\GrafoEditor2\\src\\resouce\\NodeSelected.png"));
        } catch (IOException ex) {
            System.out.println("ERRO AO LER IMAGEM NODE");
        }
    }

    /**
     * Creates new form GraphPane
     */
    public GraphPane() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (this.Hightlighted != null) {
            this.GC.GCnotify(Hightlighted);
        }
        this.GC.GCnotify(evt.getPoint());
        this.repaint();

    }//GEN-LAST:event_formMouseClicked

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        this.Hightlighted = this.GC.searchPoint(evt.getPoint());
        this.repaint();
    }//GEN-LAST:event_formMouseMoved

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (this.Hightlighted != null && this.Hightlighted.getClass()==NodeControl.class) {
            NodeControl nc = (NodeControl) this.Hightlighted;
            nc.setPoint(evt.getPoint());
            this.repaint();
        }
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
