/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import config.GEoptions;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.KeyStroke;
import javax.swing.Scrollable;
import javax.swing.border.LineBorder;
import viewcontrol.EdgeControl;
import viewcontrol.GraphControl;
import viewcontrol.ItemControl;
import viewcontrol.NodeControl;
import viewcontrol.mode;

/**
 *
 * @author I839169
 */
public class GraphPane extends javax.swing.JPanel implements Scrollable{

    private GraphControl GC;
    private ItemControl Hightlighted;
    private Point mouse;

    public GraphControl getGC() {
        return GC;
    }

    public void setGC(GraphControl GC) {
        this.GC = GC;
    }

    public ItemControl getHightlighted() {
        return Hightlighted;
    }

    public void setHightlighted(ItemControl Hightlighted) {
        this.Hightlighted = Hightlighted;
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        NodeControl nhl = null, nsel = null;
        EdgeControl ehl = null, esel = null;
        //&& (this.Hightlighted.class==NodeControl.class)
        if (this.Hightlighted != null) {
            if (this.Hightlighted.getClass() == NodeControl.class) {
                nhl = (NodeControl) Hightlighted;
            } else {
                ehl = (EdgeControl) Hightlighted;
            }

        }
        if (this.GC.getSelected() != null) {
            if (this.GC.getSelected().getClass() == NodeControl.class) {
                nsel = (NodeControl) this.GC.getSelected();
            } else {
                esel = (EdgeControl) this.GC.getSelected();
            }

        }
        if (this.GC != null) {
            EdgeControl ec;
            NodeControl nc;
            Point A, B;
            g.setColor(Color.black);
            for (int i = 0; i < GC.getECsize(); i++) {
                ec = this.GC.getEC(i);
                A = ec.getA().getPoint();
                B = ec.getB().getPoint();
                if (ehl == ec) {
                    g.setColor(Color.red);
                }
                if (esel == ec) {
                    g.setColor(Color.green);
                }
                g.drawLine(A.x, A.y, B.x, B.y);
                g.setColor(Color.black);
            }
            if (nsel != null && this.GC.getMode() == mode.addEdge) {
                g.setColor(Color.green);
                g.drawLine(nsel.getPoint().x, nsel.getPoint().y, this.mouse.x, this.mouse.y);
                g.setColor(Color.black);
            }
            for (int i = 0; i < GC.getNCsize(); i++) {
                nc = this.GC.getNC(i);
                //g.drawOval(nc.getPoint().x, nc.getPoint().y, 5, 5);
                if (nsel == nc) {
                    GEoptions.getNodeSel().paintIcon(this, g, nc.getPoint().x - (GEoptions.getNodeSel().getIconWidth() / 2), nc.getPoint().y - (GEoptions.getNodeSel().getIconHeight() / 2));
                } else if (nhl == nc) {
                    GEoptions.getNodeHL().paintIcon(this, g, nc.getPoint().x - (GEoptions.getNodeHL().getIconWidth() / 2), nc.getPoint().y - (GEoptions.getNodeHL().getIconHeight() / 2));
                } else {
                    GEoptions.getNodeImg().paintIcon(this, g, nc.getPoint().x - (GEoptions.getNodeImg().getIconWidth() / 2), nc.getPoint().y - (GEoptions.getNodeImg().getIconHeight() / 2));
                }
            }
        }
    }

    /**
     * Creates new form GraphPane
     */
    public GraphPane() {
        initComponents();
        this.GC = new GraphControl();
        ActionKeyPressDel ad = new ActionKeyPressDel(this);
        ActionKeyPressEsc ae = new ActionKeyPressEsc(this);
        this.getInputMap(WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke( "DELETE" ), "actiondelete");
        this.getActionMap().put("actiondelete",ad);
        this.getInputMap(WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke( "ESCAPE" ), "actionescape");
        this.getActionMap().put("actionescape",ae);
        setAutoscrolls(true);         
        this.setBorder(new LineBorder(Color.black));
        this.revalidate();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setAutoscrolls(true);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        
        if (this.Hightlighted != null) {
            this.GC.GCnotify(Hightlighted,evt.isShiftDown());
        }else{
            this.GC.GCnotify(evt.getPoint(),evt.isShiftDown());
        }
        this.repaint();

    }//GEN-LAST:event_formMouseClicked

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        this.Hightlighted = this.GC.searchPoint(evt.getPoint());
        this.mouse = evt.getPoint();
        this.repaint();
    }//GEN-LAST:event_formMouseMoved

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        Point lp = this.getGC().getLastPoint();
        Dimension D = new Dimension(lp.x+GEoptions.getScrollMargin(),lp.y+GEoptions.getScrollMargin());
        if(D.height<this.getParent().getSize().height){
            D.height=this.getParent().getSize().height;
        }
        if(D.width<this.getParent().getSize().width){
           D.width=this.getParent().getSize().width; 
        }
        this.setPreferredSize(D);        
        this.revalidate();
        
        Rectangle r = new Rectangle(evt.getX(), evt.getY(), 1, 1);
        scrollRectToVisible(r);
        
        if (this.Hightlighted != null && this.Hightlighted.getClass() == NodeControl.class) {
            NodeControl nc = (NodeControl) this.Hightlighted;
            if(evt.getPoint().x>(GEoptions.getNodeImg().getIconWidth()/2)&&evt.getPoint().y>(GEoptions.getNodeImg().getIconHeight()/2)){
                nc.setPoint(evt.getPoint());
                this.repaint();
            }
        }else{
            //System.out.print("*");
            //Rectangle r = new Rectangle(evt.getX(), evt.getY(), 1, 1);
            //scrollRectToVisible(r);
        }
    }//GEN-LAST:event_formMouseDragged

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyReleased

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        //this.setPreferredSize(new Dimension(evt.getPoint().x+20,evt.getPoint().y+20));
        Rectangle r = new Rectangle(evt.getX(), evt.getY(), 1, 1);
        scrollRectToVisible(r);
        //this.revalidate();
    }//GEN-LAST:event_formMouseReleased

    @Override
    public Dimension getPreferredScrollableViewportSize() {
        return getPreferredSize();
    }

    @Override
    public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {
        return 20;
    }

    @Override
    public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {
        return 20;
    }

    @Override
    public boolean getScrollableTracksViewportWidth() {
        return false;
    }

    @Override
    public boolean getScrollableTracksViewportHeight() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
static class ActionKeyPressEsc extends AbstractAction{
        private GraphPane GP;

        public GraphPane getGP() {
            return GP;
        }

        public void setGP(GraphPane GP) {
            this.GP = GP;
        }

        public ActionKeyPressEsc(GraphPane GP) {
            this.GP = GP;
        }
        
        
        @Override
        public void actionPerformed(ActionEvent e) {                        
                GP.getGC().setSelected(null);   
                GP.getGC().setMode(mode.sel);
                GP.repaint();
        }
    
    }
static class ActionKeyPressDel extends AbstractAction{
        private GraphPane GP;

        public GraphPane getGP() {
            return GP;
        }

        public void setGP(GraphPane GP) {
            this.GP = GP;
        }

        public ActionKeyPressDel(GraphPane GP) {
            this.GP = GP;
        }
        
        
        @Override
        public void actionPerformed(ActionEvent e) {
            if(this.GP.getGC().getSelected()!=null){
                //System.out.println(this.GP.getGC().getSelected());
                this.GP.getGC().removeItem(this.GP.getGC().getSelected());
                GP.repaint();
            }else{
                System.out.println("No selection");
            }
            
            
        }
    
    }
    
}
